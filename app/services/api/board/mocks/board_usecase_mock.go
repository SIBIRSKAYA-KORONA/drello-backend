// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_1_SIBIRSKAYA_KORONA/app/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUseCase) Create(uid uint, board *models.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", uid, board)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUseCaseMockRecorder) Create(uid, board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), uid, board)
}

// Get mocks base method
func (m *MockUseCase) Get(uid, bid uint, isAdmin bool) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uid, bid, isAdmin)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUseCaseMockRecorder) Get(uid, bid, isAdmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUseCase)(nil).Get), uid, bid, isAdmin)
}

// GetColumnsByID mocks base method
func (m *MockUseCase) GetColumnsByID(bid uint) ([]models.Column, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnsByID", bid)
	ret0, _ := ret[0].([]models.Column)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnsByID indicates an expected call of GetColumnsByID
func (mr *MockUseCaseMockRecorder) GetColumnsByID(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnsByID", reflect.TypeOf((*MockUseCase)(nil).GetColumnsByID), bid)
}

// Update mocks base method
func (m *MockUseCase) Update(board *models.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", board)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUseCaseMockRecorder) Update(board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUseCase)(nil).Update), board)
}

// Delete mocks base method
func (m *MockUseCase) Delete(bid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUseCaseMockRecorder) Delete(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUseCase)(nil).Delete), bid)
}
