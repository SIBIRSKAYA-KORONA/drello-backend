// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/go-park-mail-ru/2020_1_SIBIRSKAYA_KORONA/app/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUseCase is a mock of UseCase interface
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUseCase) Create(uid uint, board *models.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", uid, board)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUseCaseMockRecorder) Create(uid, board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUseCase)(nil).Create), uid, board)
}

// GetBoardsByUser mocks base method
func (m *MockUseCase) GetBoardsByUser(uid uint) (models.Boards, models.Boards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardsByUser", uid)
	ret0, _ := ret[0].(models.Boards)
	ret1, _ := ret[1].(models.Boards)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBoardsByUser indicates an expected call of GetBoardsByUser
func (mr *MockUseCaseMockRecorder) GetBoardsByUser(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardsByUser", reflect.TypeOf((*MockUseCase)(nil).GetBoardsByUser), uid)
}

// Get mocks base method
func (m *MockUseCase) Get(uid, bid uint, isAdmin bool) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uid, bid, isAdmin)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUseCaseMockRecorder) Get(uid, bid, isAdmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUseCase)(nil).Get), uid, bid, isAdmin)
}

// GetLabelsByID mocks base method
func (m *MockUseCase) GetLabelsByID(bid uint) (models.Labels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabelsByID", bid)
	ret0, _ := ret[0].(models.Labels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelsByID indicates an expected call of GetLabelsByID
func (mr *MockUseCaseMockRecorder) GetLabelsByID(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelsByID", reflect.TypeOf((*MockUseCase)(nil).GetLabelsByID), bid)
}

// GetColumnsByID mocks base method
func (m *MockUseCase) GetColumnsByID(bid uint) (models.Columns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetColumnsByID", bid)
	ret0, _ := ret[0].(models.Columns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetColumnsByID indicates an expected call of GetColumnsByID
func (mr *MockUseCaseMockRecorder) GetColumnsByID(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnsByID", reflect.TypeOf((*MockUseCase)(nil).GetColumnsByID), bid)
}

// Update mocks base method
func (m *MockUseCase) Update(board *models.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", board)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUseCaseMockRecorder) Update(board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUseCase)(nil).Update), board)
}

// Delete mocks base method
func (m *MockUseCase) Delete(bid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUseCaseMockRecorder) Delete(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUseCase)(nil).Delete), bid)
}

// InviteMember mocks base method
func (m *MockUseCase) InviteMember(bid, uid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteMember", bid, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteMember indicates an expected call of InviteMember
func (mr *MockUseCaseMockRecorder) InviteMember(bid, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMember", reflect.TypeOf((*MockUseCase)(nil).InviteMember), bid, uid)
}

// DeleteMember mocks base method
func (m *MockUseCase) DeleteMember(bid, uid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", bid, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember
func (mr *MockUseCaseMockRecorder) DeleteMember(bid, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockUseCase)(nil).DeleteMember), bid, uid)
}

// GetUsersForInvite mocks base method
func (m *MockUseCase) GetUsersForInvite(bid uint, nicknamePart string, limit uint) (models.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForInvite", bid, nicknamePart, limit)
	ret0, _ := ret[0].(models.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersForInvite indicates an expected call of GetUsersForInvite
func (mr *MockUseCaseMockRecorder) GetUsersForInvite(bid, nicknamePart, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForInvite", reflect.TypeOf((*MockUseCase)(nil).GetUsersForInvite), bid, nicknamePart, limit)
}

// InviteMemberByLink mocks base method
func (m *MockUseCase) InviteMemberByLink(uid uint, link string) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteMemberByLink", uid, link)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteMemberByLink indicates an expected call of InviteMemberByLink
func (mr *MockUseCaseMockRecorder) InviteMemberByLink(uid, link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteMemberByLink", reflect.TypeOf((*MockUseCase)(nil).InviteMemberByLink), uid, link)
}

// UpdateInviteLink mocks base method
func (m *MockUseCase) UpdateInviteLink(bid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInviteLink", bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInviteLink indicates an expected call of UpdateInviteLink
func (mr *MockUseCaseMockRecorder) UpdateInviteLink(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInviteLink", reflect.TypeOf((*MockUseCase)(nil).UpdateInviteLink), bid)
}
